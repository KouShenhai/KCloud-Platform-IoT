# /*
#  * Copyright (c) 2022-2025 KCloud-Platform-IoT Author or Authors. All Rights Reserved.
#  * <p>
#  * Licensed under the Apache License, Version 2.0 (the "License");
#  * you may not use this file except in compliance with the License.
#  * You may obtain a copy of the License at
#  * <p>
#  *   http://www.apache.org/licenses/LICENSE-2.0
#  * <p>
#  * Unless required by applicable law or agreed to in writing, software
#  * distributed under the License is distributed on an "AS IS" BASIS,
#  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  * See the License for the specific language governing permissions and
#  * limitations under the License.
#  */
services:
  mongodb:
    image: mongo:8.0.13
    container_name: mongodb
    # 保持容器在没有守护程序的情况下运行
    tty: true
    restart: always
    privileged: true
    ports:
      - "27017:27017"
    environment:
      - TZ=Asia/Shanghai
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=laokou123
      - MONGO_INITDB_DATABASE=admin
    volumes:
      - ./mongodb/data:/data/db
      - ./mongodb/logs:/var/log/mongodb
    networks:
      - iot_network
  minio:
    image: minio/minio:RELEASE.2025-04-22T22-12-26Z
    container_name: minio
    # 保持容器在没有守护程序的情况下运行
    tty: true
    restart: always
    privileged: true
    command: server --console-address ":9001" /data
    environment:
      - TZ=Asia/Shanghai
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=laokou123
    ports:
      - "9040:9000"
      - "9011:9001"
    volumes:
      - ./minio/data:/data
  mysql:
    image: mysql:9.4
    container_name: mysql
    # 保持容器在没有守护程序的情况下运行
    tty: true
    restart: always
    privileged: true
    ports:
      - "3306:3306"
    command:
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_general_ci
      --lower-case-table-names=1
    volumes:
      - ./mysql9/data:/var/lib/mysql
      - ./mysql9/my.cnf:/etc/mysql/my.cnf
      - ./mysql9/logs:/var/log/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=laokou123
      - TZ=Asia/Shanghai
  loki:
    image: grafana/loki:3.5.5
    container_name: loki
    # 保持容器在没有守护程序的情况下运行
    tty: true
    restart: always
    privileged: true
    user: "0"
    ports:
      - "3100:3100"
    environment:
      - TZ=Asia/Shanghai
    volumes:
      - ./loki/config:/etc/loki/config
      - ./loki/index:/opt/loki/index
      - ./loki/chunks:/opt/loki/chunks
    networks:
      - iot_network
  promtail:
    image: grafana/promtail:3.5.5
    container_name: promtail
    # 保持容器在没有守护程序的情况下运行
    tty: true
    restart: always
    privileged: true
    user: "0"
    command: -config.file=/etc/promtail/config/promtail-config.yaml
    environment:
      - TZ=Asia/Shanghai
    volumes:
      - ./promtail/logs:/var/logs
      - ./promtail/config:/etc/promtail/config
      - ./promtail/data/log:/logs
    networks:
      - iot_network
    depends_on:
      - loki
  # 默认账号/密码 admin/admin
  # 新密码 laokou123
  grafana:
    image: grafana/grafana:12.1.1
    container_name: grafana
    # 保持容器在没有守护程序的情况下运行
    tty: true
    restart: always
    privileged: true
    user: "0"
    ports:
      - "3000:3000"
    environment:
      - TZ=Asia/Shanghai
    volumes:
      - ./grafana:/var/lib/grafana
    networks:
      - iot_network
  # admin/laokou123
  influxdb:
    image: influxdb:2.7.12
    container_name: influxdb
    # 保持容器在没有守护程序的情况下运行
    tty: true
    restart: always
    privileged: true
    ports:
      - "8086:8086"
    environment:
      - TZ=Asia/Shanghai
    volumes:
      - ./influxdb:/var/lib/influxdb2
    networks:
      - iot_network
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    # 保持容器在没有守护程序的情况下运行
    tty: true
    restart: always
    privileged: true
    volumes:
      - ./prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - iot_network
  # ui => http://ip:16686
  jaeger-query:
    image: jaegertracing/jaeger-query:1.60
    container_name: jaeger-query
    # 保持容器在没有守护程序的情况下运行
    tty: true
    restart: always
    privileged: true
    ports:
      - "16685:16685"
      - "16686:16686"
      - "16687:16687"
    environment:
      - TZ=Asia/Shanghai
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=https://elasticsearch:9200
      - ES_USERNAME=elastic
      - ES_PASSWORD=laokou123
      - ES_TLS_ENABLED=true
      - ES_TLS_SKIP_HOST_VERIFY=true
    networks:
      - iot_network
    depends_on:
      - elasticsearch
  jaeger-collector:
    image: jaegertracing/jaeger-collector:1.60
    container_name: jaeger-collector
    # 保持容器在没有守护程序的情况下运行
    tty: true
    restart: always
    privileged: true
    ports:
      # grpc
      - "4317:4317"
      - "14250:14250"
      # http
      - "4318:4318"
      - "14268:14268"
      - "14269:14269"
    environment:
      - TZ=Asia/Shanghai
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=https://elasticsearch:9200
      - ES_USERNAME=elastic
      - ES_PASSWORD=laokou123
      - ES_TLS_ENABLED=true
      - ES_TLS_SKIP_HOST_VERIFY=true
    networks:
      - iot_network
    depends_on:
      - elasticsearch
  # web控制台地址：http://127.0.0.1:6060
  # root/taosdata
  tdengine:
    image: tdengine/tdengine:3.3.6.13
    container_name: tdengine
    # 保持容器在没有守护程序的情况下运行
    tty: true
    restart: always
    privileged: true
    ports:
      - "6030-6060:6030-6060/udp"
      - "6030-6060:6030-6060"
    environment:
      - TZ=Asia/Shanghai
    volumes:
      - ./tdengine/data:/var/lib/taos
      - ./tdengine/logs:/var/log/taos
    networks:
      - iot_network
  # docker部署 => sudo docker run -d --name emqx  --restart always --network bridge -v /home/ubuntu/emqx/data:/opt/emqx/data:rw -v /home/ubuntu/emqx/log:/opt/emqx/log:rw -p 1883:1883 -p 8083:8083 -p 8084:8084 -p 8883:8883 -p 18083:18083 emqx/emqx:5.8.6
  emqx:
    image: emqx/emqx:5.4.1
    container_name: emqx
    # 保持容器在没有守护程序的情况下运行
    tty: true
    restart: always
    privileged: true
    ports:
      - "1883:1883"
      - "8083:8083"
      - "8883:8883"
      - "18083:18083"
    environment:
      - TZ=Asia/Shanghai
    volumes:
      # 挂载数据存储
      - ./emqx/data:/opt/emqx/data
      # 挂载日志文件
      - ./emqx/log:/opt/emqx/log
    networks:
      - iot_network
  postgresql:
    image: timescale/timescaledb:latest-pg17
    container_name: postgresql
    # 保持容器在没有守护程序的情况下运行
    tty: true
    restart: always
    privileged: true
    ports:
      - "5432:5432"
    volumes:
      - ./postgresql17/data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=laokou123
      - TZ=Asia/Shanghai
    networks:
      - iot_network
  redis:
    image: redis:8.2.1
    container_name: redis
    # 保持容器在没有守护程序的情况下运行
    tty: true
    restart: always
    privileged: true
    ports:
      - "6379:6379"
    volumes:
      - ./redis7/conf/redis.conf:/etc/redis/redis.conf
      - ./redis7/data:/data
    command: redis-server --appendonly yes --requirepass 'laokou123'
    environment:
      - TZ=Asia/Shanghai
    networks:
      - iot_network
  zookeeper:
    image: bitnami/zookeeper:3.9.3
    container_name: zookeeper
    tty: true
    ports:
      - '2181:2181'
    environment:
      # 允许匿名登录
      - ALLOW_ANONYMOUS_LOGIN=yes
    restart: always
    privileged: true
    networks:
      - iot_network
  kafka:
    image: bitnami/kafka:4.0.0
    container_name: kafka
    tty: true
    ports:
      - '9092:9092'
      - '9093:9093'
    environment:
      # 节点ID
      - KAFKA_BROKER_ID=1
      # 允许使用kraft，即Kafka替代Zookeeper
      - KAFKA_ENABLE_KRAFT=yes
      # kafka角色，做broker，也要做controller
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      # 指定供外部使用的控制类请求信息
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      # 定义安全协议
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      # 定义kafka服务端socket监听端口
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      # 外网访问地址
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      # 允许使用PLAINTEXT监听器，默认false，不建议在生产环境使用
      - ALLOW_PLAINTEXT_LISTENER=yes
      # 设置broker最大内存，和初始内存
      - KAFKA_HEAP_OPTS=-Xmx512M -Xms512M
      # 集群地址
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      # 节点ID
      - KAFKA_CFG_NODE_ID=1
    restart: always
    privileged: true
    networks:
      - iot_network
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.1.3
    container_name: elasticsearch
    # 保持容器在没有守护程序的情况下运行
    tty: true
    restart: always
    privileged: true
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - ./elasticsearch9/plugins:/usr/share/elasticsearch/plugins
#      - ./elasticsearch9/data:/usr/share/elasticsearch/data
#      - ./elasticsearch9/logs:/usr/share/elasticsearch/logs
    environment:
      - discovery.type=single-node
      - TZ=Asia/Shanghai
      - ES_JAVA_OPTS=-Xmx1g -Xms1g
      - ELASTIC_PASSWORD=laokou123
    networks:
      - iot_network
    ulimits:
      memlock:
        soft: -1
        hard: -1
  # ./bin/elasticsearch-setup-passwords interactive
  kibana:
    image: docker.elastic.co/kibana/kibana:9.1.3
    container_name: kibana
    # 保持容器在没有守护程序的情况下运行
    tty: true
    restart: always
    privileged: true
    environment:
      - TZ=Asia/Shanghai
    ports:
      - "5601:5601"
    volumes:
      - ./kibana8/config/kibana.yml:/usr/share/kibana/config/kibana.yml
    networks:
      - iot_network
    depends_on:
      - elasticsearch
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 1G
  nacos:
    image: registry.cn-shenzhen.aliyuncs.com/koushenhai/laokou-nacos:3.5.4.2
    container_name: nacos
    # 保持容器在没有守护程序的情况下运行
    tty: true
    restart: always
    privileged: true
    ports:
      - "8848:8848"
      - "9848:9848"
      - "9849:9849"
    volumes:
      - ./nacos/logs:/opt/nacos/logs
    env_file:
      - env/nacos.env
    networks:
      - iot_network
    depends_on:
      - postgresql
  monitor:
    image: registry.cn-shenzhen.aliyuncs.com/koushenhai/laokou-monitor:3.5.4.2
    container_name: monitor
    # 保持容器在没有守护程序的情况下运行
    tty: true
    restart: always
    privileged: true
    ports:
      - "5000:5000"
    volumes:
      - ./monitor/logs:/opt
    env_file:
      - env/monitor.env
    depends_on:
      - admin
      - auth
      - logstash
      - gateway
      - iot
    networks:
      - iot_network
  gateway:
    image: registry.cn-shenzhen.aliyuncs.com/koushenhai/laokou-gateway:3.5.4.2
    container_name: gateway
    tty: true
    env_file:
      - env/common.env
      - env/gateway.env
    ports:
      - "5555:5555"
    volumes:
      - ./gateway/logs:/opt
    restart: always
    privileged: true
    networks:
      - iot_network
    depends_on:
      - nacos
      - kafka
      - redis
  auth:
    image: registry.cn-shenzhen.aliyuncs.com/koushenhai/laokou-auth-start:3.5.4.2
    container_name: auth
    tty: true
    env_file:
      - env/common.env
      - env/auth.env
    ports:
      - "1111:1111"
    volumes:
      - ./auth/logs:/opt
    restart: always
    privileged: true
    networks:
      - iot_network
    depends_on:
      - nacos
      - admin
      - kafka
      - redis
  iot:
    image: registry.cn-shenzhen.aliyuncs.com/koushenhai/laokou-iot-start:3.5.4.2
    container_name: iot
    tty: true
    env_file:
      - env/common.env
      - env/iot.env
    ports:
      - "10005:10005"
    volumes:
      - ./iot/logs:/opt
    restart: always
    privileged: true
    networks:
      - iot_network
    depends_on:
      - nacos
      - kafka
      - redis
  admin:
    image: registry.cn-shenzhen.aliyuncs.com/koushenhai/laokou-admin-start:3.5.4.2
    container_name: admin
    tty: true
    env_file:
      - env/common.env
      - env/admin.env
    ports:
      - "9990:9990"
    volumes:
      - ./admin/logs:/opt
    restart: always
    privileged: true
    networks:
      - iot_network
    depends_on:
      - nacos
      - elasticsearch
      - kafka
      - redis
  logstash:
    image: registry.cn-shenzhen.aliyuncs.com/koushenhai/laokou-logstash-start:3.5.4.2
    container_name: logstash
    tty: true
    env_file:
      - env/common.env
      - env/logstash.env
    ports:
      - "10003:10003"
    volumes:
      - ./logstash/logs:/opt
    restart: always
    privileged: true
    networks:
      - iot_network
    depends_on:
      - nacos
      - elasticsearch
      - kafka
  ui:
    image: registry.cn-shenzhen.aliyuncs.com/koushenhai/ui:3.5.4.2
    container_name: ui
    # 保持容器在没有守护程序的情况下运行
    tty: true
    restart: always
    privileged: true
    ports:
      - "443:443"
    volumes:
      - ./nginx/logs:/var/log/nginx
    networks:
      - iot_network
    depends_on:
      - gateway
      - auth
      - admin
  # 控制台 => admin/laokou123456789
  portainer:
   image: portainer/portainer-ce:latest
   container_name: portainer
   # 保持容器在没有守护程序的情况下运行
   tty: true
   restart: always
   privileged: true
   ports:
     - "9010:9000"
   volumes:
     - /var/run/docker.sock:/var/run/docker.sock
     - ./portainer/data:/data
   networks:
     - iot_network
  clickhouse:
    image: clickhouse/clickhouse-server:25.8
    container_name: clickhouse
    # 保持容器在没有守护程序的情况下运行
    tty: true
    restart: always
    privileged: true
    ports:
      - "8123:8123"
      - "9080:9000"
    environment:
      # 设置用户名
      - CLICKHOUSE_USER=root
      # 设置密码
      - CLICKHOUSE_PASSWORD=laokou123
    volumes:
      - ./clickhouse/data:/var/lib/clickhouse
      - ./clickhouse/log/:/var/log/clickhouse-server/
    ulimits:
      nofile:
        soft: 262144
        hard: 262144
    networks:
      - iot_network
  nexus:
    image: sonatype/nexus3
    container_name: nexus
    # 保持容器在没有守护程序的情况下运行
    tty: true
    restart: always
    privileged: true
    ports:
      - "8001:8081"
    volumes:
      - ./nexus/data:/nexus-data
    networks:
      - iot_network
  ftp:
    image: fauria/vsftpd
    container_name: ftp
    # 保持容器在没有守护程序的情况下运行
    tty: true
    restart: always
    privileged: true
    environment:
      - FTP_USER=root             # 自定义 FTP 用户名
      - FTP_PASS=laokou123        # 自定义 FTP 密码
      - PASV_ADDRESS=127.0.0.1    # 宿主机 IP（如果是云服务器，填写公网 IP）
      - PASV_MIN_PORT=30000       # 被动模式端口范围下限
      - PASV_MAX_PORT=30009       # 被动模式端口范围上限
    ports:
      - "21:21"                   # FTP 控制端口
      - "30000-30009:30000-30009" # 被动模式端口范围
    volumes:
      - ./ftp/data:/home/vsftpd   # 挂载本地目录保存 FTP 文件
    networks:
      - iot_network
  # bin/pulsar-admin tenants create laokou
  # bin/pulsar-admin namespaces create laokou/mqtt
  # bin/pulsar-admin topics create-partitioned-topic laokouyun/mqtt/laokou-mqtt-up-property-report -p 4
  # bin/pulsar-admin topics create-partitioned-topic laokouyun/mqtt/laokou-mqtt-down-property-read -p 4
  # bin/pulsar-admin topics create-partitioned-topic laokouyun/mqtt/laokou-mqtt-up-property-read-reply -p 4
  # bin/pulsar-admin topics create-partitioned-topic laokouyun/mqtt/laokou-mqtt-down-property-write -p 4
  # bin/pulsar-admin topics create-partitioned-topic laokouyun/mqtt/laokou-mqtt-up-property-write-reply -p 4
  pulsar:
    image: apachepulsar/pulsar:4.1.0
    container_name: pulsar
    # 保持容器在没有守护程序的情况下运行
    tty: true
    restart: always
    privileged: true
    command: bin/pulsar standalone
    environment:
      - PULSAR_MEM=-Xms512m -Xmx512m
    ports:
      - "6650:6650"
      - "8080:8080"
    volumes:
      - ./pulsar/data:/pulsar/data
    networks:
      - iot_network
  # https://github.com/KouShenhai/Sentinel
  # 账号/密码 => sentinel/laokou123
  sentinel-dashboard:
    image: registry.cn-shenzhen.aliyuncs.com/koushenhai/sentinel-dashboard:3.5.4.2
    container_name: sentinel-dashboard
    # 保持容器在没有守护程序的情况下运行
    tty: true
    restart: always
    privileged: true
    ports:
      - "8972:8972"
    volumes:
      - ./sentinel/logs:/opt/logs/csp
    env_file:
      - env/sentinel.env
    networks:
      - iot_network
  # https://github.com/KouShenhai/snail-job
  # 账号/密码 => admin/laokou123
  # 访问地址 => http://127.0.0.1:8088/snail-job
  snail-job:
    image: registry.cn-shenzhen.aliyuncs.com/koushenhai/snail-job:3.5.4.2
    container_name: snail-job
    # 保持容器在没有守护程序的情况下运行
    tty: true
    restart: always
    privileged: true
    ports:
      - "8088:8088"
      - "17888:17888"
    volumes:
      - ./snail-job/logs:/opt/data/log
    env_file:
      - env/snail-job.env
    networks:
      - iot_network
    depends_on:
      - postgresql
  # 修改密码
  # mysql -h 127.0.0.1 -P 9030 -u root -p
  # SET PASSWORD = PASSWORD('laokou123');
  # 添加节点
  # ALTER SYSTEM ADD BACKEND "127.0.0.1:9050";
  # 单机测试
  # docker run -p 9030:9030 -p 8030:8030 -p 8040:8040 -itd --name quickstart starrocks/allin1-ubuntu
  starrocks-fe:
    image: starrocks/fe-ubuntu:3.5.5
    hostname: starrocks-fe
    container_name: starrocks-fe
    # 保持容器在没有守护程序的情况下运行
    tty: true
    restart: always
    privileged: true
    environment:
      - TZ=Asia/Shanghai        # 设置时区
      - FE_SERVERS=starrocks-fe:9010
      - FE_CIDR=0.0.0.0/0
    ports:
      - "8030:8030" # FE http port
      - "9020:9020" # FE rpc port
      - "9030:9030" # FE mysql port
#    volumes:
#      - ./starrocks/fe/meta:/opt/starrocks/fe/meta  # 持久化元数据
#      - ./starrocks/fe/log:/opt/starrocks/fe/log    # 持久化日志
    command:
      - /opt/starrocks/fe/bin/start_fe.sh
    networks:
      - iot_network
  starrocks-be:
    image: starrocks/be-ubuntu:3.5.5
    hostname: starrocks-be
    container_name: starrocks-be
    # 保持容器在没有守护程序的情况下运行
    tty: true
    restart: always
    privileged: true
    ports:
      - "8040:8040" # BE http port
      - "8060:8060" # BE brpc port
      - "9050:9050" # BE heartbeat service port
      - "9060:9060" # BE thrift port
    environment:
      - TZ=Asia/Shanghai        # 设置时区
      # 以下是BE的一些可选配置参数，可以根据需要添加
      - BE_ADDR=starrocks-be:9050
      - BE_DATA_DIR=/opt/starrocks/be/storage
    depends_on:
      - starrocks-fe
    command:
      - /opt/starrocks/be/bin/start_be.sh
#    volumes:
#      - ./starrocks/be/storage:/opt/starrocks/be/storage # 持久化数据
#      - ./starrocks/be/log:/opt/starrocks/be/log         # 持久化日志
    networks:
      - iot_network
networks:
  iot_network:
    driver: bridge
